<!-- XLingPap.dtd
     XML/XSLT-based Linguistic paper document type definition
     Version 2.28.0
  -->
<!-- xlingpaper top element allows for the paper/book itself, a stylesheet, and published document information to be included -->
<!ELEMENT  xlingpaper (lingPaper | styledPaper | publishedPaper | publishedCollection)>
<!ATTLIST xlingpaper
  version CDATA #IMPLIED>
  
<!ELEMENT styledPaper (lingPaper, publisherStyleSheet+) >
<!ELEMENT publishedPaper (publishedDocument, lingPaper, publisherStyleSheet+) >
<!ELEMENT publishedCollection  (publishedDocument, (publishedDocument, lingPaper)+, references?, publisherStyleSheet+) >

<!-- Entity definitions -->
<!ENTITY % embedded "langData | gloss | exampleRef | sectionRef | appendixRef | citation | comment | object | br | endnote | endnoteRef | figureRef | tablenumberedRef | q | img | genericRef | genericTarget | link | 
    indexedItem | indexedRangeBegin | indexedRangeEnd | interlinearRefCitation | mediaObject | abbrRef | glossaryTermRef | iso639-3codeRef">
<!ENTITY % chunk "p | pc | example | table | tablenumbered | chart | figure | tree | blockquote | ol | ul | dl | prose-text | interlinear-text | hangingIndent | annotationRef">

<!ENTITY % XLingPapPublisherStyleSheet SYSTEM  "XLingPapPublisherStylesheet.dtd">
%XLingPapPublisherStyleSheet;
<!ENTITY % XLingPapAuthorContactInformation SYSTEM  "XLingPapAuthorContactInformation.dtd">
%XLingPapAuthorContactInformation;
<!ENTITY % XLingPapAttributeEntities SYSTEM  "XLingPapAttributeEntities.dtd">
%XLingPapAttributeEntities;
<!ENTITY % XLingPapAbbreviations SYSTEM  "XLingPapAbbreviations.dtd">
%XLingPapAbbreviations;
<!ENTITY % XLingPapGlossaryTerms SYSTEM  "XLingPapGlossaryTerms.dtd">
%XLingPapGlossaryTerms;
<!ENTITY % XLingPapContentControl SYSTEM  "XLingPapContentControl.dtd">
%XLingPapContentControl;

<!-- 
    Elements used when publishing a given ling paper/book document
    frontMatter is for a book containing two or more lingPaper elements, each of which can have its own frontMatter
    The startingPageNumber attribute is to set the starting page number if this document is being processed alone, yet
    needs to have a certain starting page number.
    
    NB: some journals have a "received; revision received; accepted dates" see Language example
-->    
<!ELEMENT publishedDocument (copyright,  frontMatter?, titlePageExtras?, titlePageBack?, volumeAuthor?, volumeTitle?) >
<!ATTLIST publishedDocument
 version CDATA #IMPLIED
 startingPageNumber CDATA #IMPLIED
 >

<!ELEMENT copyright (copyrightHolder, copyrightDate) >
<!ELEMENT copyrightHolder (#PCDATA) >
<!ATTLIST  copyrightHolder
 useAuthors (yes | no) "yes"
>

<!ELEMENT copyrightDate (#PCDATA) >

<!ELEMENT  titlePageExtras (titlePageItem)*>
<!ELEMENT  titlePageBack (titlePageItem)*>


<!ELEMENT titlePageItem (#PCDATA | langData | comment | object | br | img | link)* >
<!ATTLIST titlePageItem 
 %fontinfo;
  spaceBefore CDATA #IMPLIED
  spaceAfter  CDATA #IMPLIED
  align (start | center | end) "center"
>
<!--
   volumeAuthor is the author or editor(s) for the entire book, collection, etc.
-->
<!ELEMENT volumeAuthor (#PCDATA)>
<!ATTLIST volumeAuthor
>
<!--
   volumeTitle is the title for the entire book, collection, journal, etc.
-->
<!ELEMENT volumeTitle (#PCDATA | %embedded;)*>
<!ATTLIST volumeTitle
>

    
<!-- A paper contains various language information, optional frontmatter,
     either parts, chapters, or sections (at the top level), and optional
     backmatter.
     When the xml:lang attribute is set, it is the default xml:lang for the document.
     The version attribute is the version of XLingPap the document is for.
  -->
<!ELEMENT lingPaper (comment*, frontMatter?, ((chapterBeforePart?, part*) | chapter* | chapterInCollection* | section1*), backMatter?, referencedInterlinearTexts?, languages?, types?, framedTypes?, indexTerms*, comment*, publishingInfo?, contentControl?, validation?)>
<!ATTLIST lingPaper
    partlabel CDATA #IMPLIED
    chapterlabel CDATA #IMPLIED
    includemediaobjects (yes | no) "no"
    xml:lang CDATA #IMPLIED
    sortRefsAbbrsByDocumentLanguage (yes | no) "no"
    version CDATA #IMPLIED
    appendixRefSingularLabel CDATA #IMPLIED
    appendixRefPluralLabel CDATA #IMPLIED
    appendixRefCapitalizedSingularLabel CDATA #IMPLIED
    appendixRefCapitalizedPluralLabel CDATA #IMPLIED
    appendixRefDefault (none | singular | plural | capitalizedSingular | capitalizedPlural ) "none"
    sectionRefSingularLabel CDATA #IMPLIED
    sectionRefPluralLabel CDATA #IMPLIED
    sectionRefCapitalizedSingularLabel CDATA #IMPLIED
    sectionRefCapitalizedPluralLabel CDATA #IMPLIED
    sectionRefDefault (none | singular | plural | capitalizedSingular | capitalizedPlural ) "none"
    showcommentinoutput (yes | no) "no"
    showindexeditemsineditor (yes | no) "yes"
    showiso639-3codeininterlinear (yes | no) "no"
    abbreviationlang IDREF #IMPLIED
    glossarytermlang IDREF #IMPLIED
    iso639-3codeslang IDREF #IMPLIED
    indexlang IDREF #IMPLIED
    figureLabel CDATA #IMPLIED
    figureLabelAndCaptionLocation (before|after) "after"
    figureRefSingularLabel CDATA #IMPLIED
    figureRefPluralLabel CDATA #IMPLIED
    figureRefCapitalizedSingularLabel CDATA #IMPLIED
    figureRefCapitalizedPluralLabel CDATA #IMPLIED
    figureRefDefault (none | singular | plural | capitalizedSingular | capitalizedPlural ) "none"
    tablenumberedLabel CDATA #IMPLIED
    tablenumberedLabelAndCaptionLocation (before|after) "before"
    tablenumberedRefSingularLabel CDATA #IMPLIED
    tablenumberedRefPluralLabel CDATA #IMPLIED
    tablenumberedRefCapitalizedSingularLabel CDATA #IMPLIED
    tablenumberedRefCapitalizedPluralLabel CDATA #IMPLIED
    tablenumberedRefDefault (none | singular | plural | capitalizedSingular | capitalizedPlural ) "none"
    automaticallywrapinterlinears (no | yes) "no"
    literalLabel CDATA #IMPLIED
    defaultGlossLanguage IDREF #IMPLIED
    defaultVernacularLanguage IDREF #IMPLIED
    XeLaTeXSpecial CDATA #IMPLIED
    showExampleIdOnHoverInWebpage (yes | no) "no"
    useImageWidthSetToWidthOfExampleFigureOrChart (yes | no) "no"
>
<!-- Languages groups a set of language definitions.  This is at the end because it looks better in a tool like XMLMind -->
<!ELEMENT languages (language+)>
<!ATTLIST languages
>
<!ELEMENT language (langName*)>
<!ATTLIST language
    id ID #REQUIRED
    hyphenationExceptionsFile CDATA #IMPLIED
    name CDATA #IMPLIED
    ethnCode CDATA #IMPLIED
    ISO639-3Code CDATA #IMPLIED
    rtl (yes | no) #IMPLIED
    %fontinfo; 
>
<!-- a language name, which can be expressed in various languages -->
<!ELEMENT langName (#PCDATA)>
<!ATTLIST langName
    xml:lang CDATA #REQUIRED
>
<!-- Front matter -->
<!-- We allow more than one abstract and more than one contents for cases where one needs the abstract or contents to be in more than one language. -->
<!ELEMENT frontMatter (title, shortTitle?, subtitle?, ((author, affiliation*, emailAddress*) | authorContactInfo)+, shortAuthor?, presentedAt?, date?, version*, keywordsShownHere?, contents?, acknowledgements?, abstract*, preface*)>
<!ELEMENT title (#PCDATA | %embedded; | titleContentChoices)*>
<!ATTLIST title
    xml:lang CDATA #IMPLIED
>
<!-- shortTitle is what can appear in a header or footer -->
<!ELEMENT shortTitle (#PCDATA | %embedded; | titleContentChoices)*>
<!ATTLIST shortTitle
    xml:lang CDATA #IMPLIED
>
<!ELEMENT subtitle (#PCDATA | %embedded; | titleContentChoices)*>
<!ATTLIST subtitle
    xml:lang CDATA #IMPLIED
>
<!ELEMENT titleContentChoices (titleContent, titleContent+) >
<!ELEMENT titleContent (#PCDATA | %embedded;)*>
<!ATTLIST titleContent
    contentType IDREF #REQUIRED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT labelContentChoices (labelContent, labelContent+) >
<!ELEMENT labelContent (#PCDATA)>
<!ATTLIST labelContent
    contentType IDREF #REQUIRED
    xml:lang CDATA #IMPLIED
>
<!-- ORCID is the Open Researcher and Contributor ID; see http://en.wikipedia.org/wiki/ORCID -->
<!ELEMENT author (#PCDATA | comment | endnote)*>
<!ATTLIST author
    ORCID CDATA #IMPLIED
    xml:lang CDATA #IMPLIED
    contentType IDREF #IMPLIED
>
<!ELEMENT affiliation (#PCDATA | %embedded;)*>
<!ATTLIST affiliation
    xml:lang CDATA #IMPLIED
    contentType IDREF #IMPLIED
>
<!ELEMENT emailAddress (#PCDATA)*>
<!ATTLIST emailAddress
    contentType IDREF #IMPLIED
>
<!ELEMENT authorContactInfo EMPTY>
<!ATTLIST authorContactInfo
    author IDREF #REQUIRED
    contentType IDREF #IMPLIED
>
<!-- shortAuthor  is what can appear in a header or footer -->
<!ELEMENT shortAuthor (#PCDATA)>
<!ATTLIST shortAuthor
    xml:lang CDATA #IMPLIED
>
<!ELEMENT presentedAt (#PCDATA | %embedded;)*>
<!ATTLIST presentedAt
    xml:lang CDATA #IMPLIED
    contentType IDREF #IMPLIED
>
<!ELEMENT date (#PCDATA)>
<!ATTLIST date
    xml:lang CDATA #IMPLIED
    contentType IDREF #IMPLIED
>
<!ELEMENT version (#PCDATA | %embedded;)*>
<!ATTLIST version
    xml:lang CDATA #IMPLIED
    contentType IDREF #IMPLIED
>
<!ELEMENT acknowledgements (labelContentChoices?, shortTitle?, (%chunk;)+)>
<!ATTLIST acknowledgements
    XeLaTeXSpecial CDATA #IMPLIED
    label CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!ELEMENT abstract (labelContentChoices?, shortTitle?, (%chunk;)+)>
<!ATTLIST abstract
    XeLaTeXSpecial CDATA #IMPLIED
    label CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!ELEMENT preface (labelContentChoices?, shortTitle?, (%chunk; | landscape | framedUnit | abbreviationsShownHere | listOfFiguresShownHere | listOfTablesShownHere | glossaryTermsShownHere | glossaryTermsShownHereAsDefinitionList | iso639-3codesShownHere)+)>
<!ATTLIST preface
    XeLaTeXSpecial CDATA #IMPLIED
    label CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!ELEMENT contents (labelContentChoices?, shortTitle?)>
<!ATTLIST contents
    XeLaTeXSpecial CDATA #IMPLIED
    showLevel (1 | 2 | 3 | 4 | 5 | 6 | 0) "3"
    label CDATA #IMPLIED
    backmattershowLevel (1 | 2 | 3 | 4 | 5 | 6 | 0) "3"
    backmatterlabel CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!-- an keywordsShownHere element can be placed in front matter or back matter.
    The list of keywords defined within publishingInfo will be listed one after the other separated by what is in the separationText attribute.
-->
<!ELEMENT keywordsShownHere (labelContentChoices?, shortTitle?) >
<!ATTLIST keywordsShownHere
    XeLaTeXSpecial CDATA #IMPLIED
    label CDATA #IMPLIED
    showincontents (yes | no) "no"
>

<!-- Main content -->
<!ELEMENT part (secTitle, shortTitle?,(%chunk; | landscape | framedUnit)*, (chapter* | chapterInCollection*))>
<!ATTLIST part
    XeLaTeXSpecial CDATA #IMPLIED
    id ID #REQUIRED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
    startingPageNumber CDATA #IMPLIED
>
<!ELEMENT chapter (secTitle, shortTitle?, (%chunk; | landscape | framedUnit)*, section1*)>
<!ATTLIST chapter
    id ID #REQUIRED
    XeLaTeXSpecial CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
    startingPageNumber CDATA #IMPLIED
>
<!ELEMENT chapterBeforePart (secTitle, shortTitle?, (%chunk; | landscape | framedUnit)*, section1*)>
<!ATTLIST chapterBeforePart
    XeLaTeXSpecial CDATA #IMPLIED
    id ID #REQUIRED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!ELEMENT chapterInCollection (frontMatter, (%chunk; | landscape | framedUnit)*, section1*, backMatter?, publishingInfo?) >
<!ATTLIST chapterInCollection
    XeLaTeXSpecial CDATA #IMPLIED
    id ID #REQUIRED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!ELEMENT section1 (secTitle, shortTitle?, (%chunk; | landscape | framedUnit)*, section2*)>
<!ATTLIST section1
    id ID #REQUIRED
    XeLaTeXSpecial CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!ELEMENT section2 (secTitle, shortTitle?, (%chunk; | landscape | framedUnit)*, section3*)>
<!ATTLIST section2
    id ID #REQUIRED
    XeLaTeXSpecial CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!ELEMENT section3 (secTitle, shortTitle?, (%chunk; | landscape | framedUnit)*, section4*)>
<!ATTLIST section3
    id ID #REQUIRED
    XeLaTeXSpecial CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!ELEMENT section4 (secTitle, shortTitle?, (%chunk; | landscape | framedUnit)*, section5*)>
<!ATTLIST section4
    id ID #REQUIRED
    XeLaTeXSpecial CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!ELEMENT section5 (secTitle, shortTitle?, (%chunk; | landscape | framedUnit)*, section6*)>
<!ATTLIST section5
    id ID #REQUIRED
    XeLaTeXSpecial CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!ELEMENT section6 (secTitle, shortTitle?, (%chunk; | landscape | framedUnit)*)>
<!ATTLIST section6
    id ID #REQUIRED
    XeLaTeXSpecial CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!ELEMENT secTitle (#PCDATA | %embedded; | titleContentChoices)*>
<!ATTLIST secTitle
    xml:lang CDATA #IMPLIED
>
<!-- references to sections, etc. -->
<!ELEMENT sectionRef EMPTY>
<!ATTLIST sectionRef
    sec IDREF #REQUIRED
    textBefore (none | singular | plural | capitalizedSingular | capitalizedPlural | useDefault ) "useDefault"
    showTitle (short | full | numberOnly) "numberOnly"
    contentType IDREF #IMPLIED
>
<!ELEMENT appendixRef EMPTY>
<!ATTLIST appendixRef
    app IDREF #REQUIRED
    textBefore (none | singular | plural | capitalizedSingular | capitalizedPlural | useDefault ) "useDefault"
    showTitle (short | full | numberOnly) "numberOnly"
    contentType IDREF #IMPLIED
>
<!-- paragraph -->
<!ELEMENT p (#PCDATA | %embedded; | definition| abbreviationsShownHere | iso639-3codesShownHere)*>
<!ATTLIST p
    xml:lang CDATA #IMPLIED
    %special;
    pagecontrol (keepWithNext | letFormatterDecide) "letFormatterDecide"
    contentType IDREF #IMPLIED
>
<!-- paragraph continuation -->
<!ELEMENT pc (#PCDATA | %embedded; | definition)*>
<!ATTLIST pc
    xml:lang CDATA #IMPLIED
    %special;
    contentType IDREF #IMPLIED
>
<!-- hanging indent paragraph -->
<!ELEMENT hangingIndent (#PCDATA | %embedded; | definition)*>
<!ATTLIST hangingIndent
    xml:lang CDATA #IMPLIED
    %special;
    contentType IDREF #IMPLIED
    initialIndent CDATA #IMPLIED
    hangingIndent CDATA #IMPLIED
>
<!-- blockquote -->
<!ELEMENT blockquote (#PCDATA | %embedded; | %chunk;)*>
<!ATTLIST blockquote
    type IDREF #IMPLIED
    xml:lang CDATA #IMPLIED
    %special;
    contentType IDREF #IMPLIED
>
<!-- quote -->
<!ELEMENT q (#PCDATA | %embedded;)*>
<!ATTLIST q
    cite CDATA #IMPLIED
    type IDREF #IMPLIED
    xml:lang CDATA #IMPLIED
>
<!-- ordered list -->
<!-- Attribute numberFormat can be 1, 01, a, A, i, I any number Unicode character and combinations of these (e.g. A.1.a) -->
<!ELEMENT ol (li)*>
<!ATTLIST ol
    type IDREF #IMPLIED
    %special;
    contentType IDREF #IMPLIED
    numberFormat CDATA #IMPLIED
    numberLevel (single | multiple) #IMPLIED
>
<!-- unordered list -->
<!ELEMENT ul (li)*>
<!ATTLIST ul
    type IDREF #IMPLIED
    %special;
    contentType IDREF #IMPLIED
>
<!-- list element -->
<!ELEMENT li (#PCDATA | %embedded; | %chunk;)*>
<!ATTLIST li
    id ID #IMPLIED
    xml:lang CDATA #IMPLIED
    contentType IDREF #IMPLIED
>
<!-- definition list -->
<!ELEMENT dl (dt | dd)*>
<!ATTLIST dl
    %special;
    contentType IDREF #IMPLIED
    showddOnNewLineInPDF (yes|no) "no"
>
<!-- definition term -->
<!ELEMENT dt (#PCDATA | %embedded; | %chunk;)*>
<!ATTLIST dt
    xml:lang CDATA #IMPLIED
    contentType IDREF #IMPLIED
>
<!-- definition description -->
<!ELEMENT dd (#PCDATA | %embedded; | %chunk;)*>
<!ATTLIST dd
    xml:lang CDATA #IMPLIED
    contentType IDREF #IMPLIED
>
<!-- prose text (i.e. text in a language, but is prose, not interlinear -->
<!ELEMENT prose-text (p|pc)*>
<!ATTLIST prose-text
    lang IDREF #REQUIRED
    type IDREF #IMPLIED
    xml:lang CDATA #IMPLIED
    %special;
    contentType IDREF #IMPLIED
>
<!-- object is a generic way to tag a special kind of object.  The type attribute
     defines any formatting needed to show the object.
     -->
<!ELEMENT object (#PCDATA | object | abbrRef)*>
<!ATTLIST object
    type IDREF #REQUIRED
    xml:lang CDATA #IMPLIED
>

<!-- a set of one or more interlinear-text elements which will be referenced within the document, but not included in the output of the document -->
<!ELEMENT referencedInterlinearTexts (referencedInterlinearText+) >
<!-- a single interlinear-text which will be referenced, but not shown in the document  -->
<!-- the url attribute is used for citing references to an interlinear within an interlinear-text -->
<!ELEMENT referencedInterlinearText (interlinear-text) >
<!ATTLIST  referencedInterlinearText
    url CDATA #REQUIRED
>

<!-- types group a set of types -->
<!ELEMENT types (type | comment)*>
<!-- a type element allows for customization via either CSS or XSL-FO.
     The before CDATA is a way to input canned text prior to the content(but only works with element object).
     The after CDATA is a way to input canned text after the content(but only works with element object).
     The id allows it to be referenced by object elements.
     cssSpecial allows one to write CSS-specific properties
     xsl-foSpecific allows one to write XSL-FO-specific properties
     types allows one to combine several other type elements in a new one; the user is responsible to avoid duplicates
      -->
<!ELEMENT type EMPTY>
<!ATTLIST type
    after CDATA #IMPLIED
    before CDATA #IMPLIED
    id ID #REQUIRED
    types IDREFS #IMPLIED
    %fontinfo; 
>
<!-- breaks may be used in charts and trees or other places as required. -->
<!ELEMENT br EMPTY>
<!-- comments are for the author.  The intent is that they will not show up in
     the formatted version of the paper. -->
<!ELEMENT comment (#PCDATA | %embedded;)*>
<!ATTLIST comment
    xml:lang CDATA #IMPLIED
>
<!-- Examples come in several varieties:
     word:           (24) nikita "I see it."
     listWord:       (24) a. nikitak   "I see it."
                          b. onikitak  "I saw it."
     single:         (24) This is an example.
     listSingle:     (24) a. This is the first example.
                          b. This is the second example.
                          c. This is the fourth example.
     interlinear:     (24)  In  Wan  onikitak          in  kowat.
                            in  Wan  o-ni-k-ita-k      in  kowat
                            the John PST-1-3O-see-PRET the snake.
                            "John saw the snake."
     listInterlinear: (24) a. In  Wan  onikitak          in  kowat.
                              in  Wan  o-ni-k-ita-k      in  kowat
                              the John PST-1-3O-see-PRET the snake.
                              "John saw the snake."
                           b. Onikitak          in  Wan  in  kowat.
                              o-ni-k-ita-k      in  Wan  in  kowat.
                              PST-1-3O-see-PRET the John the snake.
                              "John saw the snake."
     tree, chart, and table

     If one includes the num attribute, then one can reference the example by number.
-->
    <!ELEMENT example (exampleHeading?, (word | listWord+ | single | listSingle+ | interlinear | interlinearRef | listInterlinear+ | tree | chart | table | definition | listDefinition+ | annotationRef+))>
<!ATTLIST example
    num ID #IMPLIED
    %special;
    showiso639-3codes (yes | no) "no"
    contentType IDREF #IMPLIED
>
<!ELEMENT word ((langData | gloss)+, word?)>
<!ATTLIST word
    externalID CDATA #IMPLIED
>
<!ELEMENT listWord ((langData | gloss)+, word?)>
<!ATTLIST listWord
    externalID CDATA #IMPLIED
    letter ID #REQUIRED
    %special;
>
<!ELEMENT single ((langData | gloss)+, interlinearSource?)>
<!ATTLIST single
    externalID CDATA #IMPLIED
>
<!ELEMENT listSingle ((langData | gloss)+, interlinearSource?)>
<!ATTLIST listSingle
    externalID CDATA #IMPLIED
    letter ID #REQUIRED
    %special;
>
<!-- the text ID is a reference number for an interlinear within an interlinear text 
    the textref IDREF refers to a text ID when the interlinear is in an example
    interlinearSource is a way to manually indicate where the interlinear came from
-->
<!ELEMENT interlinear (exampleHeading?, (lineGroup | free | literal | interlinear | phrase)+, interlinearSource?)>
<!ATTLIST interlinear
    externalID CDATA #IMPLIED
    text ID #IMPLIED
    textref IDREF #IMPLIED
    XeLaTeXSpecial CDATA #IMPLIED
>
<!--  
    the textref IDREF refers to a text ID of some interlinear elsewhere in the document; the interlinear content is copied there
-->
<!ELEMENT interlinearRef EMPTY>
<!ATTLIST interlinearRef
    textref IDREF #REQUIRED
>
<!--  
    the textref IDREF refers to a text ID of some interlinear elsewhere in the document; the 'citation' to the text is inserted in text, e.g. '(House:12)'
-->
<!ELEMENT interlinearRefCitation EMPTY>
<!ATTLIST interlinearRefCitation
    textref IDREF #REQUIRED
    bracket (none | both | initial | final) #IMPLIED
    lineNumberOnly (no | yes) "no"
    showTitleOnly (short | full | no) "no"
>
<!ELEMENT interlinearSource (#PCDATA | %embedded;)*>
<!ATTLIST interlinearSource
    xml:lang CDATA #IMPLIED
>
<!ELEMENT lineGroup (line | conflatedLine)+>
<!ELEMENT line ((langData | gloss)+ | wrd+)>
<!ATTLIST line
    contentType IDREF #IMPLIED
>
<!ELEMENT wrd (#PCDATA | %embedded;)*>
<!ATTLIST wrd
    XeLaTeXSpecial CDATA #IMPLIED
    lang IDREF #IMPLIED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT conflatedLine (lineSet | conflation)+>
<!ELEMENT lineSet (lineSetRow+)>
<!ATTLIST lineSet
    letter ID #IMPLIED
>
<!ELEMENT lineSetRow (wrd+)>
<!ELEMENT conflation (lineSet+)>
<!ELEMENT free (#PCDATA | %embedded;)*>
<!ATTLIST free
    XeLaTeXSpecial CDATA #IMPLIED
    externalID CDATA #IMPLIED
    lang IDREF #IMPLIED
    xml:lang CDATA #IMPLIED
    textafter CDATA #IMPLIED
    textbefore CDATA #IMPLIED
>
<!ELEMENT literal (#PCDATA | %embedded;)*>
<!ATTLIST literal
    XeLaTeXSpecial CDATA #IMPLIED
    externalID CDATA #IMPLIED
    lang IDREF #IMPLIED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT exampleHeading (#PCDATA | %embedded;)*>
<!ELEMENT listInterlinear (exampleHeading?, (lineGroup | free | literal | interlinear | interlinearRef | phrase)+, interlinearSource?)>
<!ATTLIST listInterlinear
    externalID CDATA #IMPLIED
    letter ID #REQUIRED
    XeLaTeXSpecial CDATA #IMPLIED
>
<!-- EMELD interlinear items 
    Augmented by morphset so we can get XMLmind to show it as a table.
    Also changed word to iword (for interlinear word).
    -->
<!ELEMENT item (#PCDATA | %embedded;)*>
<!ATTLIST item
    type (cf | gls | hn | msa | pos | punct | title | txt | note | variantTypes) #REQUIRED
    lang IDREF #REQUIRED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT morph (item+)>
<!ATTLIST morph
    type CDATA #IMPLIED
>
<!-- N.B. EMELD does not use morphset; we do so we can properly format the data in an XML editor like XMLmind that uses CSS to display data  -->
<!ELEMENT morphemes (morphset)>
<!ELEMENT morphset (morph+)>
<!ELEMENT phrase (words, item*)>
<!-- N.B. EMELD uses word, but we already have that defined.  so we're using iword for interlinear word -->
<!ELEMENT iword (morphemes | item)+>
<!ELEMENT words (iword+)>
<!-- N.B. EMELD uses interlinear-text, so we will, too -->
<!ELEMENT interlinear-text (textInfo?, ((item*, phrases*) | (interlinear | p | pc)*) )>
<!ATTLIST interlinear-text
    externalID CDATA #IMPLIED
    text ID #IMPLIED
    %special;
    contentType IDREF #IMPLIED
    linesToInclude CDATA #IMPLIED
>
<!ELEMENT textInfo (textTitle*, shortTitle*, source*, genres?)>
<!ATTLIST textInfo
    xml:lang CDATA #IMPLIED
>
<!ELEMENT textTitle (#PCDATA | %embedded;)*>
<!ATTLIST textTitle
    externalID CDATA #IMPLIED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT source (#PCDATA | %embedded;)*>
<!ATTLIST source
    externalID CDATA #IMPLIED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT genres (genre)*>
<!ELEMENT genre (#PCDATA | %embedded;)*>
<!ATTLIST genre
    externalID CDATA #IMPLIED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT phrases (phrase*)>
<!ELEMENT table (caption?, headerRow?, (row | tr)*, endCaption?)>
<!ATTLIST table
    align (left | center | right) "left"
    backgroundcolor CDATA #IMPLIED
    border CDATA #IMPLIED
    cellpadding CDATA #IMPLIED
    cellspacing CDATA #IMPLIED
    id ID #IMPLIED
    type IDREF #IMPLIED
    %special;
    pagecontrol (keepAllOnSamePage | letFormatterDecide) "letFormatterDecide"
    contentType IDREF #IMPLIED
    counterNumberFormat CDATA #IMPLIED
>
<!ELEMENT tablenumbered (shortCaption?, (table | (caption?, img)))>
<!ATTLIST tablenumbered
    location (here | topOfPage | bottomOfPage) "here"
    id ID #REQUIRED
    type IDREF #IMPLIED
    %special;
    contentType IDREF #IMPLIED
>
<!ELEMENT caption (#PCDATA | %embedded;)*>
<!ATTLIST caption
    align (left | center | right | justify) "left"
    type IDREF #IMPLIED
    colspan CDATA #IMPLIED
    rowspan CDATA #IMPLIED
    valign (top | middle | bottom | baseline) "top"
    direction (ltr | rtl | inherit) #IMPLIED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT endCaption (#PCDATA | %embedded;)*>
<!ATTLIST endCaption
    align (left | center | right | justify) "left"
    type IDREF #IMPLIED
    colspan CDATA #IMPLIED
    rowspan CDATA #IMPLIED
    valign (top | middle | bottom | baseline) "top"
    direction (ltr | rtl | inherit) #IMPLIED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT shortCaption (#PCDATA | %embedded;)*>
<!ELEMENT headerRow (headerCol+)>
<!ATTLIST headerRow
    type IDREF #IMPLIED
    direction (ltr | rtl | inherit) #IMPLIED
    backgroundcolor CDATA #IMPLIED
    %special;
>
<!ELEMENT headerCol (#PCDATA | %embedded; | table)*>
<!ATTLIST headerCol
    align (left | center | right | justify) "left"
    backgroundcolor CDATA #IMPLIED
    type IDREF #IMPLIED
    colspan CDATA #IMPLIED
    rowspan CDATA #IMPLIED
    valign (top | middle | bottom | baseline) "top"
    direction (ltr | rtl | inherit) #IMPLIED
    width CDATA #IMPLIED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT th (#PCDATA | %embedded; | table | counter)*>
<!ATTLIST th
    align (left | center | right | justify) "left"
    backgroundcolor CDATA #IMPLIED
    type IDREF #IMPLIED
    colspan CDATA #IMPLIED
    rowspan CDATA #IMPLIED
    valign (top | middle | bottom | baseline) "top"
    direction (ltr | rtl | inherit) #IMPLIED
    width CDATA #IMPLIED
    xml:lang CDATA #IMPLIED
    %special;
>
<!ELEMENT row (col+)>
<!ATTLIST row
    type IDREF #IMPLIED
    direction (ltr | rtl | inherit) #IMPLIED
    backgroundcolor CDATA #IMPLIED
    %special;
>
<!--was: <!ELEMENT tr (th | td)+> but this allows odd combinations; we'll now make it so that th elements are allowed all the way across or left side only.
         we are still thinking that th elements should also only be at the top (or the left side)-->
<!ELEMENT tr (th+ | td+ | (th+, td+))>
<!ATTLIST tr
    type IDREF #IMPLIED
    direction (ltr | rtl | inherit) #IMPLIED
    backgroundcolor CDATA #IMPLIED
    %special;
>
<!ELEMENT col (#PCDATA | %embedded; | table | interlinear)*>
<!ATTLIST col
    align (left | center | right | justify) "left"
    backgroundcolor CDATA #IMPLIED
    type IDREF #IMPLIED
    colspan CDATA #IMPLIED
    rowspan CDATA #IMPLIED
    valign (top | middle | bottom | baseline) "top"
    width CDATA #IMPLIED
    direction (ltr | rtl | inherit) #IMPLIED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT td (#PCDATA | %embedded; | table | interlinear | example | counter)*>
<!ATTLIST td
    align (left | center | right | justify) "left"
    backgroundcolor CDATA #IMPLIED
    type IDREF #IMPLIED
    colspan CDATA #IMPLIED
    rowspan CDATA #IMPLIED
    valign (top | middle | bottom | baseline) "top"
    width CDATA #IMPLIED
    direction (ltr | rtl | inherit) #IMPLIED
    xml:lang CDATA #IMPLIED
    %special;
>
<!ELEMENT counter EMPTY >
<!ELEMENT chart (#PCDATA | %embedded; | ol | ul | dl | hangingIndent)*>
<!ATTLIST chart
    type IDREF #IMPLIED
    xml:lang CDATA #IMPLIED
    %special;
    contentType IDREF #IMPLIED
>
<!ELEMENT figure (chart, (caption, shortCaption?)?)>
<!ATTLIST figure
    location (here | topOfPage | bottomOfPage) "here"
    align (left | center | right | justify) "left"
    id ID #REQUIRED
    type IDREF #IMPLIED
    %special;
    contentType IDREF #IMPLIED
>
<!ELEMENT figureRef EMPTY>
<!ATTLIST figureRef
    figure IDREF #REQUIRED
    textBefore (none | singular | plural | capitalizedSingular | capitalizedPlural | useDefault ) "useDefault"
    showCaption (short | full | numberOnly) "numberOnly"
    contentType IDREF #IMPLIED
>
<!ELEMENT tablenumberedRef EMPTY>
<!ATTLIST tablenumberedRef
    table IDREF #REQUIRED
    textBefore (none | singular | plural | capitalizedSingular | capitalizedPlural | useDefault ) "useDefault"
    showCaption (short | full | numberOnly) "numberOnly"
    contentType IDREF #IMPLIED
>
<!-- a listOfFiguresShownHere or a listOfTablesShownHere can be placed in a preface or a glossary.
    The figures or tables will be given as a kind of table of contents, including (short)caption and page number
-->
<!ELEMENT listOfFiguresShownHere EMPTY >
<!ELEMENT listOfTablesShownHere EMPTY >

<!ELEMENT definition (#PCDATA | %embedded; | ol | ul | dl | keyTerm)*>
<!ATTLIST definition
    type IDREF #IMPLIED
    xml:lang CDATA #IMPLIED
>
<!ELEMENT listDefinition (definition)>
<!ATTLIST listDefinition
    letter ID #REQUIRED
    %special;
>
<!ELEMENT keyTerm (#PCDATA | %embedded; )*>
<!ATTLIST keyTerm
    type IDREF #IMPLIED
    xml:lang CDATA #IMPLIED
    %fontinfo;
>
<!ELEMENT tree (#PCDATA | p | img)*>
<!ATTLIST tree
    type IDREF #IMPLIED
    xml:lang CDATA #IMPLIED
    %special;
    contentType IDREF #IMPLIED
>
<!ELEMENT img EMPTY>
<!ATTLIST img
    src CDATA #REQUIRED
    description CDATA #IMPLIED
    width CDATA #IMPLIED
    height CDATA #IMPLIED
    %special;
>
<!ELEMENT mediaObject EMPTY >
<!ATTLIST mediaObject
    contentheight CDATA #IMPLIED
    contentwidth CDATA #IMPLIED
    src CDATA #REQUIRED
    showcontrols (yes | no) "no"
    icon (sound | moviecamera | cinema | opticaldisk) "sound"
    font-size CDATA #IMPLIED
    color CDATA #IMPLIED
    >
<!-- there's more... -->
<!-- langData is a way to tag some text as belonging to a particular language. -->
<!ELEMENT langData (#PCDATA | %embedded;)*>
<!ATTLIST langData
    externalID CDATA #IMPLIED
    lang IDREF #REQUIRED
    textafter CDATA #IMPLIED
    textbefore CDATA #IMPLIED
>
<!-- gloss is a way to tag some text as being a gloss in a particular language. -->
<!ELEMENT gloss (#PCDATA | %embedded;)*>
<!ATTLIST gloss
    externalID CDATA #IMPLIED
    lang IDREF #REQUIRED
    textafter CDATA #IMPLIED
    textbefore CDATA #IMPLIED
>
<!-- references to example numbers or example number/letter.
     Use just num for the example number.
     Use just letter for an example number/letter combination.
     One may include parentheses around the date ("both", the default), or
       one may have no parentheses or just initial or just final.
     One may append some punctuation (punct) to the end of the number.
     One may only include the letter (and not the number). -->
<!ELEMENT exampleRef EMPTY>
<!ATTLIST exampleRef
    num IDREF #IMPLIED
    letter IDREF #IMPLIED
    equal (no | yes) "no"
    punct CDATA #IMPLIED
    paren (none | both | initial | final) #IMPLIED
    letterOnly (no | yes) "no"
    contentType IDREF #IMPLIED
>
<!-- generic references (to sections, examples, endnotes, etc.) 
        gref is the link
        showlivalue is used only when the link is to an li within an ol
           no is the default and means do not show the li number/letter
           before means show the li number/letter before the content of the genricRef
           after means show the li number/letter after the content of the genricRef
           only means show the li number/letter but do not show the content of the genericRef
-->
<!ELEMENT genericRef (#PCDATA | %embedded;)*>
<!ATTLIST genericRef
    gref IDREF #REQUIRED
    showlivalue (no | before | after | only) "no"
    xml:lang CDATA #IMPLIED
    contentType IDREF #IMPLIED
>
<!-- generic target: an ID that can be embedded almost anywhere and then linked to via a genericRef -->
<!ELEMENT genericTarget EMPTY>
<!ATTLIST genericTarget
    id ID #REQUIRED
>
<!-- A reference to an ISO639-3 code in a language element -->
<!ELEMENT iso639-3codeRef EMPTY >
<!ATTLIST iso639-3codeRef
    lang IDREF #REQUIRED
    brackets (none | both | initial | final) "both"
>
<!-- an iso639-3codesShownHere element can be placed in an endnote, in a preface, in an appendix or in a glossary.
    The ISO639-3 codes will be shown at that location; that is, those ISO 639-3 codes actually used in the document will be shown there.
    If it is in an endnote, then the ISO639-3 codes will be listed one after the other within a paragraph.
-->
<!ELEMENT iso639-3codesShownHere EMPTY >
<!ATTLIST iso639-3codesShownHere
   codeWidth CDATA #IMPLIED
   equalsWidth CDATA #IMPLIED
   languageNameWidth CDATA #IMPLIED
>
<!-- a media-independent link -->
<!ELEMENT link (#PCDATA | %embedded;)*>
<!ATTLIST link
    href CDATA #REQUIRED
    xml:lang CDATA #IMPLIED
    XeLaTeXSpecial CDATA #IMPLIED
>
<!-- backmatter includes appendices, endnotes and references -->
<!ELEMENT backMatter (acknowledgements?, appendix*, glossary*, abbreviations?, glossaryTerms?, endnotes?, (references, selectedBibliography?)?, keywordsShownHere?, index*, authorContactInfo*)>
<!-- endnotes -->
<!ELEMENT endnotes (labelContentChoices?, shortTitle?, chapterLabelContentChoices?, appendixLabelContentChoices?, partLabelContentChoices?)>
<!ATTLIST endnotes
    XeLaTeXSpecial CDATA #IMPLIED
    label CDATA #IMPLIED
>
<!-- following three are used for controlling label of each kind in endnotes in a book when using endnotes instead of footnotes -->
<!ELEMENT chapterLabelContentChoices (labelContent, labelContent+) >
<!ELEMENT appendixLabelContentChoices (labelContent, labelContent+) >
<!ELEMENT partLabelContentChoices (labelContent, labelContent+) >

<!-- An endnote goes in the flow of the text.  One may refer to a footnote via
     an endnoteRef.  -->
<!ELEMENT endnote (%chunk; | abbreviationsShownHere | iso639-3codesShownHere)*>
<!ATTLIST endnote
    id ID #REQUIRED
>
<!ELEMENT endnoteRef EMPTY>
<!ATTLIST endnoteRef
    note IDREF #REQUIRED
    showNumberOnly (yes | no) "no"
>
<!-- appendices are handled like chapters -->
<!ELEMENT appendix (secTitle, shortTitle?, (%chunk; | landscape | framedUnit | abbreviationsShownHere | glossaryTermsShownHere | glossaryTermsShownHereAsDefinitionList | iso639-3codesShownHere | section1 | section2)*)>
<!ATTLIST appendix
    id ID #REQUIRED
    label CDATA #IMPLIED
    showinlandscapemode (yes | no) "no"
    type IDREF #IMPLIED
    XeLaTeXSpecial CDATA #IMPLIED
    contentType IDREF #IMPLIED
>
<!-- glossary -->
<!ELEMENT glossary (labelContentChoices?, shortTitle?, (%chunk; | landscape | framedUnit | abbreviationsShownHere | listOfFiguresShownHere | listOfTablesShownHere | glossaryTermsShownHere | glossaryTermsShownHereAsDefinitionList | iso639-3codesShownHere)+)>
<!ATTLIST glossary
    XeLaTeXSpecial CDATA #IMPLIED
    label CDATA #IMPLIED
    type IDREF #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!-- selected bibliography 
       This is a place to put citations in the few cases where one wants to have more references than are actually cited in the document body.
-->
<!ELEMENT selectedBibliography (labelContentChoices?, shortTitle?, (citation+))>
<!ATTLIST selectedBibliography
    XeLaTeXSpecial CDATA #IMPLIED
    label CDATA #IMPLIED
    contentType IDREF #IMPLIED
    showinlandscapemode (yes | no) "no"
>
<!-- landscape mode: in PDF, output the material in landscape instead of portrait mode; will start a new page in the output -->
<!ELEMENT landscape (%chunk;)+>

<!-- framedUnit: output the material offset per attributes in the framedType -->
<!ELEMENT framedUnit (%chunk;)+>
<!ATTLIST framedUnit
     framedtype IDREF #REQUIRED
     initialexamplenumber CDATA #IMPLIED
     initialfigurenumber CDATA #IMPLIED
     initialnumberedtablenumber CDATA #IMPLIED
    contentType IDREF #IMPLIED
>
<!ELEMENT framedTypes (framedType)+>
<!ELEMENT framedType EMPTY>
<!ATTLIST framedType 
     id ID #REQUIRED
     spaceafter CDATA #IMPLIED
     spacebefore CDATA #IMPLIED
     indent-before CDATA #IMPLIED
     indent-after CDATA #IMPLIED
     backgroundcolor CDATA #IMPLIED
     align (left | center | right) 'left'
     innerleftmargin CDATA #IMPLIED
     innertopmargin CDATA #IMPLIED
     innerrightmargin CDATA #IMPLIED
     innerbottommargin CDATA #IMPLIED
     description CDATA #IMPLIED
>
<!-- the tagging of some text or embedded elements as belonging to an index term;
this is what goes in the content of the document
  the term attribute refers to the indexTerm
  the main attribute indicates if this is a main instance of the term (often bolded in the index).
-->
<!ELEMENT indexedItem EMPTY>
<!ATTLIST indexedItem
    term IDREF #REQUIRED
    main (yes | no) "no"
>
<!-- the tagging of a range of material as belonging to an index term;
There is a start point and an end point.  The end point refers to the start point via its begin attribute.
This allows indexed ranges to overlap each other.
  the term attribute refers to the indexTerm
  the main attribute indicates if this is a main instance of the term (often bolded in the index).
-->
<!ELEMENT indexedRangeBegin EMPTY>
<!ATTLIST indexedRangeBegin
    id ID #REQUIRED
    term IDREF #REQUIRED
    main (yes | no) "no"
>
<!ELEMENT indexedRangeEnd EMPTY>
<!ATTLIST indexedRangeEnd
    begin IDREF #REQUIRED
>
<!-- Indexes go in back matter.
Can have more than one (for names, languages, and subjects, e.g.).
       the label attribute provides a way to give it a title 
       the kind attribute indicates which kind of index it is ('common' is used for a single, common index)
       -->
<!ELEMENT index (labelContentChoices?, shortTitle?, (%chunk; | landscape | framedUnit)*)>
<!ATTLIST index
    XeLaTeXSpecial CDATA #IMPLIED
    label CDATA #IMPLIED
    kind (common | name | language | subject) "common"
    contentType IDREF #IMPLIED
>
<!ELEMENT publishingInfo (publishingBlurb?, authorContacts?, keywords?) >
<!ATTLIST publishingInfo
 startingPageNumber CDATA #IMPLIED
 startingPageNumberInBook CDATA #IMPLIED
 version CDATA #IMPLIED
 >
<!ELEMENT publishingBlurb (#PCDATA | %embedded;)* >

<!ELEMENT validation EMPTY >
<!ATTLIST validation
    status (minimum | maximum) "maximum"
>
<!ENTITY % XLingPapIndexTerms SYSTEM  "XLingPapIndexTerms.dtd">
%XLingPapIndexTerms;
<!ENTITY % XLingPapReferences SYSTEM  "XLingPapReferences.dtd">
%XLingPapReferences;
<!ENTITY % XLingPapCharacterEntities SYSTEM  "XLingPapCharacterEntities.dtd">
%XLingPapCharacterEntities;
<!-- REVISION HISTORY
2.0.0   26-Dec-2007   Andy Black   Add publisher style sheet and published document capability 
1.12.0 10-Aug-2007 Andy Black Add interlinear-text with referencing from examples; add example/definition; add cssSpecial and sxl-foSpecial to more elements
1.11.0 30-Nov-2006 Andy Black Allow multiple preface elements.  Add xml:lang attributes
1.10.0 01-Aug-2006 Andy Black Added types/type; font info to language.; changed endnoteRef's IDREF from ref to note to make it work better in XMLmind editor.  Removed content for language; removed css attribute of lingPaper; remove styles and style.  Add EMELD-like morpheme-aligned interlinear.
1.9.0 19-Apr-2006 Andy Black  Modifications to make editing with XmlMind nicer
1.8.0 29-Nov-2004 Andy Black  Add styles element so can imbed CSS styles.
1.7.1 14-Oct-2004  Andy Black  Allow width elements on columns
1.7.0 03-Jun-2004  Andy Black  Add link element (for media) (skipped 1.6 to keep in sync with XLingPap1.xsl)
1.5.4 26-May-2004 Andy Black  Allow appendices to begin with section2 (i.e. the appendix itself is equivalent to a section1)
1.5.3 01-Dec-2003 Andy Black  Allow chart to have lists
1.5.2 25-Nov-2003 Andy Black  Added cellpadding, cellspacing to table element; added interlinear within col element
1.5.1 22-Jan-2003 Andy Black  Removed img from chart since it is now in embedded entity.
1.5.0 13-Jan-2003  Andy Black Add genericRef element
1.4.3  22-Oct-2002  Andy Black  Remove ambiguity in chapter and section element definitions.
1.4.2  16-Oct-2002  Andy Black  Add label to endnotes and references
1.4.1    07-Oct-2002 Andy Black Added items as needed for ZapNum paper
1.2.1 16-Sep-2002 Andy Black  Allow a single chapter before any parts
1.2  03-Jul-2002  Andy Black  Added HTML 4.0 entities
                                                 Added wrd, conflatedLine, lineSet, conflation, and lineSetRow
1.0 21-Jun-2001 Andy Black  Initial draft.

-->
